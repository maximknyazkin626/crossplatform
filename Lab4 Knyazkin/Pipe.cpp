#include "Pipe.h"
int Pipe::pMaxId = 0;
float Length;
float Diameter;
bool IsRepairing;
int outCsId;
int inCsId;



Pipe::Pipe(std::ifstream& fin)
{
	fin >> Length
		>> Diameter
		>> IsRepairing
		>> outCsId
		>> inCsId;
}

int Pipe::GetProductivity() const
{
	return sqrt(pow(Diameter, 5 / Length)) * 10;
}

float Pipe::GetLength() const
{
	return Length;
}

bool Pipe::GetRepairing() const
{
	return IsRepairing;
}

void Pipe::Edit()
{
	if (IsRepairing)
		std::cout << "\nО, нет! Труба сломана!\n";
	else
		std::cout << "\nТруба не нуждается в ремонте.\n";
	std::cout << "Что Вы хотите сделать с трубой?\n"
		<< "1 - Починить/Сломать\n"
		<< "0 и пр. - Отмена\n";
	int input;
	CheckValue(input, "Введите: ");
	switch (input)
	{
	case 1:
	{
		IsRepairing = !IsRepairing;
		if (IsRepairing)
			std::cout << "Труба успешно сломана и находится в ремонте!\n";
		else
			std::cout << "Ремонт трубы успешно завершён!\n";
		break;
	}
	default:
	{
		std::cout << "Вы вышли из режима редактирования.\n";
		break;
	}
	}
}

void Pipe::SaveToFile(std::ofstream& fout)
{
	fout << Length << '\n'
		<< Diameter << '\n'
		<< IsRepairing << '\n'
		<< outCsId << '\n'
		<< inCsId << '\n';
}

void Pipe::Repair()
{
	IsRepairing = true;
}

std::ostream& operator << (std::ostream& out, const Pipe& p)
{
	out << " Длина: " << p.Length << " м" << '\n'
		<< " Диаметр: " << p.Diameter << " см" << '\n'
		<< " Производительность: " << p.GetProductivity() << " млн м3/сут" << '\n';
	if (p.IsRepairing)
		out << " Находится в ремонте" << '\n';
	else
		out << " Не нуждается в ремонте" << '\n';
	return out;
}

std::istream& operator >> (std::istream& in, Pipe& p)
{
	CheckValue(p.Length, "Введите длину трубы (в метрах): ");
	CheckValue(p.Diameter, "Введите диаметр трубы (в сантиметрах): ");
	p.IsRepairing = true;
	p.outCsId = -1;
	p.inCsId = -1;
	return in;
}

Pipe::Pipe()
{
}